buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
  }
  dependencies {
    classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 8

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

subprojects {
  version = "$projectVersion"
  ext.appName = 'TestGame'
  repositories {
    mavenCentral()
//    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
//    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'TestGame' + '-parent'

import com.badlogic.gdx.tools.texturepacker.TexturePacker

task packTextures {
    doLast {
        def settings = new TexturePacker.Settings()
        settings.maxWidth = 2048
        settings.maxHeight = 2048
        settings.duplicatePadding = true
        settings.edgePadding = true
        settings.rotation = false

        TexturePacker.process(settings,
            "assets/game/board",     // входная папка с твоими 60 картинками
            "assets/game/atlases",   // куда сохранять атлас
            "board"                  // имя атласа (будет board.png и board.atlas)
        )
    }
}
