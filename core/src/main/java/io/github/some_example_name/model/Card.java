package io.github.some_example_name.model;

import io.github.some_example_name.core.GameContext;
import io.github.some_example_name.core.effects.CardEffect;

public class Card {
    private final int id; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã
    private final String name; // –ù–∞–∑–≤–∞–Ω–∏–µ
    private final String description; // –û–ø–∏—Å–∞–Ω–∏–µ
    private final CardType type; // –¢–∏–ø –∫–∞—Ä—Ç—ã (—Å—É—â–µ—Å—Ç–≤–æ, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏ —Ç.–ø.)
    private final int manaCost; // –°—Ç–æ–∏–º–æ—Å—Ç—å (–º–∞–Ω–∞/—Ä–µ—Å—É—Ä—Å—ã)
    private final Faction faction;
    private final CardEffect effect; // –≠—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã
    private final String imagePath; // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
    private final boolean burnOnPlay; // üëà –Ω–æ–≤—ã–π —Ñ–ª–∞–≥

    public Card(int id, String name, String description, int manaCost, CardType type, Faction faction,
            CardEffect effect, String imagePath, boolean burnOnPlay) { // üëà –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç —Ä
        this.id = id;
        this.name = name;
        this.description = description;
        this.manaCost = manaCost;
        this.type = type;
        this.faction = faction;
        this.effect = effect;
        this.imagePath = imagePath;
        this.burnOnPlay = burnOnPlay; // üëà –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    }

    public boolean isBurnOnPlay() {
        return burnOnPlay;
    }

    public String getImagePath() {
        return imagePath;
    }

    // --- –ì–µ—Ç—Ç–µ—Ä—ã ---
    public Faction getFaction() {
        return faction;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public CardType getType() {
        return type;
    }

    public int getCost() {
        return manaCost;
    }

    public CardEffect getEffect() {
        return effect;
    }

    // --- –í—ã–∑–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Ä—Ç—ã ---
    public void play(GameContext context, Targetable target) {
        if (effect != null) {
            effect.apply(context, target);
        }
    }
}
