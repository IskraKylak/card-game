package io.github.some_example_name.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import io.github.some_example_name.model.status.StatusEffect;
import io.github.some_example_name.model.status.TargetableStatusEffect;
import io.github.some_example_name.model.status.TargetingRule;

public abstract class CombatEntity extends Entity {

  private int attackPower;
  private int maxActionsPerTurn = 1;
  protected ActionPlan actionPlan = new ActionPlan();
  // –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  protected List<StatusEffect> spells;

  protected CombatEntity(int id, String name, int health, int attackPower,
      int maxActionsPerTurn, List<StatusEffect> spells) {
    super(id, name, health);

    this.attackPower = attackPower;
    this.maxActionsPerTurn = maxActionsPerTurn;
    this.spells = spells != null ? spells : List.of(); // –µ—Å–ª–∏ null ‚Üí –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
  }

  // --- –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º ---
  public List<StatusEffect> getSpells() {
    return spells;
  }

  public int getMaxActionsPerTurn() {
    return this.maxActionsPerTurn;
  }

  public int getAttackPower() {
    return this.attackPower;
  }

  public int setAttack(int attackPower) {
    this.attackPower = Math.max(0, attackPower); // ‚ö° –Ω–µ –º–µ–Ω—å—à–µ 0
    return this.attackPower;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —Ç–∏–ø—É (ATTACK –∏–ª–∏ CAST_SPELL)
   */
  private void addActionForType(ActionPlan.ActionType type,
      Player player,
      Enemy enemy,
      List<StatusEffect> availableSpells,
      List<Targetable> alliedTargets,
      List<Targetable> enemyTargets,
      Random rnd) {
    switch (type) {
      case ATTACK:
        // –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏
        Targetable target = chooseAttackTarget(player, enemy, alliedTargets, enemyTargets, rnd);
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞—Ç–∞–∫–∏ –≤ –ø–ª–∞–Ω
        actionPlan.addAction(new ActionPlan.Action(ActionPlan.ActionType.ATTACK, target, attackPower, null));
        break;
      case CAST_SPELL:
        if (!availableSpells.isEmpty()) {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
          int idx = rnd.nextInt(availableSpells.size());
          StatusEffect spell = availableSpells.get(idx);
          // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø–ª–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–ª—å—é
          addActionForSpell(spell, player, enemy, alliedTargets, enemyTargets, rnd);
        }
        break;
      default:
        break;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–ª—å—é
   */
  private void addActionForSpell(StatusEffect spell,
      Player player,
      Enemy enemy,
      List<Targetable> alliedTargets,
      List<Targetable> enemyTargets,
      Random rnd) {
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    Targetable target = chooseSpellTarget(spell, player, enemy, alliedTargets, enemyTargets, rnd);
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    actionPlan.addAction(new ActionPlan.Action(ActionPlan.ActionType.CAST_SPELL, target, 0, spell));
  }

  /**
   * –ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
   */
  private Targetable chooseSpellTarget(StatusEffect spell,
      Player player,
      Enemy enemy,
      List<Targetable> alliedTargets,
      List<Targetable> enemyTargets,
      Random rnd) {
    TargetingRule rule = TargetingRule.NONE;

    // –ï—Å–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TargetingRule
    if (spell instanceof TargetableStatusEffect tse) {
      rule = tse.getTargetingRule();
    }

    switch (rule) {
      case SELF:
        return this; // –Ω–∞ —Å–µ–±—è
      case PLAYER:
        return player; // –Ω–∞ –∏–≥—Ä–æ–∫–∞
      case ALLY:
        return alliedTargets.isEmpty() ? this : alliedTargets.get(rnd.nextInt(alliedTargets.size()));
      case ENEMY:
        return enemyTargets.isEmpty() ? enemy : enemyTargets.get(rnd.nextInt(enemyTargets.size()));
      case RANDOM_ALLY:
        return alliedTargets.isEmpty() ? this : alliedTargets.get(rnd.nextInt(alliedTargets.size()));
      case RANDOM_ENEMY:
        return enemyTargets.isEmpty() ? enemy : enemyTargets.get(rnd.nextInt(enemyTargets.size()));
      case NONE:
      default:
        return this; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–µ–±—è
    }
  }

  /**
   * –ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏
   */
  private Targetable chooseAttackTarget(Player player,
      Enemy enemy,
      List<Targetable> alliedTargets,
      List<Targetable> enemyTargets,
      Random rnd) {
    if (this instanceof Unit) {
      // –Æ–Ω–∏—Ç –∏–≥—Ä–æ–∫–∞ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞ –∏–ª–∏, –µ—Å–ª–∏ –≤—Ä–∞–≥–∞ –Ω–µ—Ç, —Å–∞–º–æ–≥–æ enemy
      if (!enemyTargets.isEmpty()) {
        return enemyTargets.get(rnd.nextInt(enemyTargets.size()));
      } else {
        return enemy; // –∞—Ç–∞–∫—É–µ–º –≤—Ä–∞–≥–∞
      }
    } else if (this instanceof Enemy) {
      // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –∏–≥—Ä–æ–∫–∞
      if (!enemyTargets.isEmpty()) {
        return enemyTargets.get(rnd.nextInt(enemyTargets.size()));
      } else {
        return player; // –∞—Ç–∞–∫—É–µ–º –∏–≥—Ä–æ–∫–∞
      }
    } else {
      return this; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–∞ —Å–µ–±—è
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —é–Ω–∏—Ç–∞ –∏–ª–∏ –≤—Ä–∞–≥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç attackPower –∏ spells, –∞ —Ç–∞–∫–∂–µ maxActionsPerTurn.
   */
  public void planActions(Player player, Enemy enemy) {
    System.out.println("1Ô∏è‚É£ planActions –≤—ã–∑–≤–∞–Ω –¥–ª—è: " + getName());

    // 1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    actionPlan.clear();
    System.out.println("2Ô∏è‚É£ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –æ—á–∏—â–µ–Ω");

    // 2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —é–Ω–∏—Ç –∑–∞ —Ö–æ–¥
    int actionsCount = Math.min(getMaxActionsPerTurn(), 3); // –º–∞–∫—Å–∏–º—É–º 3
    System.out.println("3Ô∏è‚É£ actionsCount = " + actionsCount);

    // 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
    List<StatusEffect> availableSpells = new ArrayList<>(spells);
    System.out.println("4Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: " + availableSpells.size());

    // 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ò–ò
    List<Targetable> alliedTargets;
    List<Targetable> enemyTargets;

    if (this instanceof Unit unit) {
      alliedTargets = player.getSlots().stream()
          .map(Slot::getUnit)
          .filter(u -> u != null && u != unit)
          .map(u -> (Targetable) u)
          .toList();
      enemyTargets = List.of((Targetable) enemy);
    } else if (this instanceof Enemy) {
      alliedTargets = List.of();
      enemyTargets = player.getSlots().stream()
          .map(Slot::getUnit)
          .filter(u -> u != null)
          .map(u -> (Targetable) u)
          .toList();
    } else {
      alliedTargets = List.of();
      enemyTargets = List.of();
    }

    System.out.println("5Ô∏è‚É£ alliedTargets = " + alliedTargets.size() + ", enemyTargets = " + enemyTargets.size());

    Random rnd = new Random();

    // 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç actionsCount
    for (int i = 0; i < actionsCount; i++) {
      List<ActionPlan.ActionType> possibleActions = new ArrayList<>();
      if (attackPower > 0)
        possibleActions.add(ActionPlan.ActionType.ATTACK);
      if (!availableSpells.isEmpty())
        possibleActions.add(ActionPlan.ActionType.CAST_SPELL);

      System.out.println("6Ô∏è‚É£ possibleActions –Ω–∞ —à–∞–≥–µ " + i + ": " + possibleActions);

      if (!possibleActions.isEmpty()) {
        ActionPlan.ActionType chosenAction = possibleActions.get(rnd.nextInt(possibleActions.size()));
        System.out.println("7Ô∏è‚É£ –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: " + chosenAction);

        if (chosenAction == ActionPlan.ActionType.ATTACK) {
          addActionForType(ActionPlan.ActionType.ATTACK, player, enemy, availableSpells, alliedTargets, enemyTargets,
              rnd);
        } else {
          // –î–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
          List<StatusEffect> spellsCopy = new ArrayList<>(availableSpells);
          if (!spellsCopy.isEmpty()) {
            int idx = rnd.nextInt(spellsCopy.size());
            StatusEffect spell = spellsCopy.remove(idx);
            addActionForSpell(spell, player, enemy, alliedTargets, enemyTargets, rnd);
            System.out.println("8Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: " + spell.getClass().getSimpleName());
          }
        }

        // üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–ª–∞–Ω
        if (!actionPlan.getActions().isEmpty()) {
          ActionPlan.Action lastAction = actionPlan.getActions().get(actionPlan.getActions().size() - 1);
          Targetable target = lastAction.getTarget();
          String targetName = (target instanceof Entity e) ? e.getName() : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å";
          System.out.println("9Ô∏è‚É£ " + getName() + " –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª " + lastAction.getType() + " –Ω–∞ " + targetName);
        } else {
          System.out.println("‚ö†Ô∏è –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø–ª–∞–Ω–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞");
        }
      } else {
        System.out.println("‚ö†Ô∏è –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —à–∞–≥–µ " + i);
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ actionPlan.
   * player ‚Äî –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
   * enemy ‚Äî –≤—Ä–∞–≥
   */
  public void executeActionPlan(Player player, Enemy enemy) {
    for (ActionPlan.Action action : actionPlan.getActions()) {
      switch (action.getType()) {
        case ATTACK -> {
          Targetable target = action.getTarget();
          performAttack(target);
        }
        case CAST_SPELL -> {
          Targetable target = action.getTarget();
          StatusEffect effect = action.getEffect();

          if (effect != null && target instanceof Entity entityTarget) {
            // –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏
            effect.onApply(entityTarget);

            // –µ—Å–ª–∏ —É —Ç–µ–±—è —É Entity –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
            entityTarget.addStatusEffect(effect);
          }
        }
      }
    }

    // –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—â–∞–µ–º –ø–ª–∞–Ω
    actionPlan.clear();
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–∞–∫—É –ø–æ —Ü–µ–ª–∏.
   */
  public void performAttack(Targetable target) {
    if (target instanceof Unit unit) {
      unit.takeDamage(attackPower);
    } else if (target instanceof Player player) {
      player.takeDamage(attackPower);
    } else if (target instanceof Enemy enemy) {
      enemy.takeDamage(attackPower);
    }
  }

  public ActionPlan getActionPlan() {
    return actionPlan;
  }

}
