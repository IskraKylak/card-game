package io.github.some_example_name.core;

import java.util.ArrayList;
import java.util.Random;

import io.github.some_example_name.model.*;
import io.github.some_example_name.model.payload.StatusEffectPayload;
import io.github.some_example_name.model.payload.UnitAttackPayload;
import io.github.some_example_name.model.payload.UnitSpellPayload;
import io.github.some_example_name.model.status.StatusEffect;

public class GameEngine {

  private final GameContext context;
  private final Random random;

  public GameEngine(GameContext context) {
    this.context = context;
    this.random = new Random();
    startBattle();

    context.getEventBus().on(BattleEventType.UNIT_ATTACK_LOGIC, evt -> {
      UnitAttackPayload p = (UnitAttackPayload) evt.getPayload();
      p.getAttacker().performAttack(p.getTarget());
      context.getEventBus().emit(BattleEvent.of(BattleEventType.ENTITY_DAMAGED, p.getTarget()));
      p.getOnComplete().run();
    });
  }

  // -------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–Ø --------------------
  private void startBattle() {
    Player player = context.getPlayer();
    player.initBattle();
    player.restoreMana(player.getMaxMana());

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    for (Slot slot : player.getSlots()) {
      slot.removeUnit();
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–¥–∞ –≤—Ä–∞–≥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
    Enemy enemy = context.getEnemy();
    enemy.planActions(player, enemy);

    // –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–∞—Ö —É–∂–µ –µ—Å—Ç—å —é–Ω–∏—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è),
    // –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
    for (Slot slot : player.getSlots()) {
      Unit unit = slot.getUnit();
      if (unit != null) {
        unit.planActions(player, enemy);
      }
    }
  }

  // -------------------- –ö–ê–†–¢–´ --------------------
  public boolean playCardOnTarget(Card card, Targetable target) {
    Player player = context.getPlayer();

    if (player.getMana() < card.getCost()) {
      System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç—ã: " + card.getName());
      return false;
    }

    boolean validTarget;
    switch (card.getType()) {
      case UNIT:
        validTarget = target instanceof Slot;
        break;
      case ATTACK:
        validTarget = target instanceof Enemy || target instanceof Player;
        break;
      case BUFF:
        validTarget = target instanceof Unit;
        break;
      case DEBUFF:
        validTarget = target instanceof Enemy;
        break;
      default:
        validTarget = false;
    }

    if (!validTarget) {
      System.out.println("–ö–∞—Ä—Ç–∞ " + card.getName() + " –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω–∞ —ç—Ç—É —Ü–µ–ª—å.");
      return false;
    }

    boolean applied = card.getEffect().apply(context, target);

    if (applied) {
      player.setMana(player.getMana() - card.getCost());

      // üî• –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞—Ä—Ç–∞ —Å–≥–æ—Ä–∞–µ—Ç –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞?
      if (card.isBurnOnPlay()) {
        System.out.println("üî• –ö–∞—Ä—Ç–∞ " + card.getName() + " —Å–≥–æ—Ä–∞–µ—Ç –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!");

        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –∏–≥—Ä—ã
        player.getHand().remove(card);
        player.getBattleDeck().remove(card);
        player.getDiscard().remove(card);
        // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å player.getRemovedFromGame().add(card);
      } else {
        // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî –∫–∞—Ä—Ç–∞ —É—Ö–æ–¥–∏—Ç –≤ —Å–±—Ä–æ—Å
        player.playCard(card);
      }
      context.getEventBus().emit(BattleEvent.of(BattleEventType.CARD_PLAYED, card));

    }

    checkBattleState(); // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–æ–π
    return applied;
  }

  // -------------------- –£–î–ê–õ–ï–ù–ò–ï –ú–ï–†–¢–í–´–• –Æ–ù–ò–¢–û–í --------------------
  private void removeDeadUnits() {
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();

    for (Slot slot : player.getSlots()) {
      Unit u = slot.getUnit();
      if (u != null && !u.isAlive()) {
        slot.removeUnit();
      }
    }

    // –î–ª—è –≤—Ä–∞–≥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —é–Ω–∏—Ç–æ–≤
  }

  // -------------------- –ü–û–ò–°–ö –°–õ–û–¢–ê –ü–û –Æ–ù–ò–¢–£ --------------------
  private Slot findSlotForUnit(Unit unit, Player player) {
    if (unit == null || player == null || player.getSlots() == null)
      return null;

    for (Slot slot : player.getSlots()) {
      if (unit.equals(slot.getUnit())) {
        return slot;
      }
    }

    return null;
  }

  private boolean checkBattleState() {
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();

    // 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –º—ë—Ä—Ç–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∏–∑ —Å–ª–æ—Ç–æ–≤
    for (Slot slot : player.getSlots()) {
      Unit u = slot.getUnit();
      if (u != null && !u.isAlive()) {
        handleUnitDeath(u);
      }
    }

    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞ / –≤—Ä–∞–≥–∞
    if (!player.isAlive()) {
      context.getEventBus().emit(BattleEvent.of(BattleEventType.PLAYER_DIED, player));
      getWinner();
      return true;
    }

    if (!enemy.isAlive()) {
      context.getEventBus().emit(BattleEvent.of(BattleEventType.UNIT_DIED, enemy));
      getWinner();
      return true;
    }

    return false; // –±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
  }

  // -------------------- END TURN --------------------

  // -------------------- END TURN --------------------

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è endPlayerTurn, –Ω–∞—á–∏–Ω–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Ö–æ–¥–∞
  public void endPlayerTurn(Runnable onTurnEnd) {
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();
    TurnProcessor turnProcessor = new TurnProcessor();
    turnProcessor.setOnTurnEnd(onTurnEnd);

    processPlayerUnits(player, turnProcessor, enemy);
    processEnemy(enemy, turnProcessor, player);

    // üöÄ –°—Ç–∞—Ä—Ç –æ—á–µ—Ä–µ–¥–∏
    turnProcessor.runNext();

    startPlayerTurn();
  }

  // ------------------------ –Æ–ù–ò–¢ --------------------

  // –•–æ–¥ —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
  private void processPlayerUnits(Player player, TurnProcessor turnProcessor, Enemy enemy) {
    System.out.println("-------------–•–û–î –Æ–ù–ò–¢–û–í –ò–ì–†–û–ö–ê-------------");
    for (Slot slot : player.getSlots()) {
      Unit unit = slot.getUnit();
      if (unit == null || !unit.isAlive())
        continue;

      // –≠—Ñ—Ñ–µ–∫—Ç—ã
      processUnitEffects(unit, turnProcessor);

      // –ï—Å–ª–∏ —é–Ω–∏—Ç —É–º–µ—Ä –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      if (!unit.isAlive())
        continue;

      // –î–µ–π—Å—Ç–≤–∏—è
      processUnitActions(unit, turnProcessor, player, enemy);

      unit.getActionPlan().clear();
    }
  }

  // –≠—Ñ—Ñ–µ–∫—Ç—ã —é–Ω–∏—Ç–∞
  private void processUnitEffects(Unit unit, TurnProcessor turnProcessor) {
    for (StatusEffect effect : new ArrayList<>(unit.getStatusEffects())) {
      turnProcessor.addAction(() -> {
        if (!unit.isAlive()) {
          turnProcessor.runNext();
          return;
        }
        effect.onTurnStart(unit);

        context.getEventBus().emit(BattleEvent.of(
            BattleEventType.STATUS_EFFECT_TRIGGERED,
            new StatusEffectPayload(unit, effect, () -> {

              if (!effect.tick(unit)) {
                effect.onRemove(unit);
                unit.removeStatusEffect(effect);
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –ø–æ—Å–ª–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
              if (checkBattleState())
                return;

              turnProcessor.runNext();
            })));
      });
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è —é–Ω–∏—Ç–∞
  private void processUnitActions(Unit unit, TurnProcessor turnProcessor, Player player, Enemy enemy) {
    for (ActionPlan.Action action : new ArrayList<>(unit.getActionPlan().getActions())) {
      turnProcessor.addAction(() -> {
        if (!unit.isAlive()) {
          turnProcessor.runNext(); // —é–Ω–∏—Ç —É–º–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
          return;
        }
        executeAction(unit, action, turnProcessor, player, enemy);
      });
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–∞—Ç–∞–∫–∞/–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ)
  private void executeAction(Unit unit, ActionPlan.Action action, TurnProcessor turnProcessor,
      Player player, Enemy enemy) {
    Targetable target = action.getTarget();

    // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ü–µ–ª—å –º–µ—Ä—Ç–≤–∞
    if (target instanceof Entity entityTarget && !entityTarget.isAlive()) {
      unit.planActions(player, enemy);
      target = unit.getActionPlan().getActions().get(0).getTarget();
    }

    switch (action.getType()) {
      case ATTACK -> executeAttack(unit, target, turnProcessor, player);
      case CAST_SPELL -> executeSpell(unit, target, action.getEffect(), turnProcessor);
    }
  }

  // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
  private void executeSpell(Unit caster, Targetable target, StatusEffect effect, TurnProcessor turnProcessor) {
    context.getEventBus().emit(BattleEvent.of(
        BattleEventType.UNIT_CAST_SPELL,
        new UnitSpellPayload(caster, target, effect, () -> {
          if (!caster.isAlive()) {
            turnProcessor.runNext();
            return;
          }

          if (effect != null && target instanceof Entity entityTarget) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            StatusEffect existing = entityTarget.getStatusEffects().stream()
                .filter(e -> e.getName().equals(effect.getName()))
                .findFirst().orElse(null);

            if (existing != null) {
              existing.onRemove(entityTarget);
              entityTarget.removeStatusEffect(existing);
            }

            entityTarget.addStatusEffect(effect);

            effect.onApply(entityTarget);
            context.getEventBus().emit(BattleEvent.of(
                BattleEventType.STATUS_EFFECT_APPLIED, entityTarget));
          }

          if (checkBattleState())
            return; // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å

          turnProcessor.runNext();
        })));
  }

  // –ê—Ç–∞–∫–∞
  private void executeAttack(Unit attacker, Targetable target, TurnProcessor turnProcessor, Player player) {
    context.getEventBus().emit(BattleEvent.of(
        BattleEventType.UNIT_ATTACK,
        new UnitAttackPayload(attacker, target, () -> {
          if (checkBattleState())
            return; // –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å

          turnProcessor.runNext();
        })));
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ —é–Ω–∏—Ç–∞
  private void handleUnitDeath(Entity entity) {
    context.getEventBus().emit(BattleEvent.of(BattleEventType.UNIT_DIED, entity));
    if (entity instanceof Unit deadUnit) {
      Slot slot = findSlotForUnit(deadUnit, context.getPlayer());
      if (slot != null)
        slot.removeUnit();
    }
  }

  // ------------------ –í–†–ê–ì --------------------

  private void processEnemy(Enemy enemy, TurnProcessor turnProcessor, Player player) {
    System.out.println("-------------–•–û–î –í–†–ê–ì–ê-------------");
    if (enemy == null || !enemy.isAlive())
      return;

    // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—Ä–∞–≥–∞
    processEnemyEffects(enemy, turnProcessor);

    // –ï—Å–ª–∏ –≤—Ä–∞–≥ —É–º–µ—Ä –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    if (!enemy.isAlive())
      return;

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (enemy.getActionPlan().getActions().isEmpty()) {
      enemy.planActions(player, enemy);
    }

    // –î–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞
    processEnemyActions(enemy, turnProcessor, player);

    enemy.getActionPlan().clear();
  }

  // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—Ä–∞–≥–∞
  private void processEnemyEffects(Enemy enemy, TurnProcessor turnProcessor) {
    for (StatusEffect effect : new ArrayList<>(enemy.getStatusEffects())) {
      turnProcessor.addAction(() -> {
        if (!enemy.isAlive()) {
          turnProcessor.runNext();
          return;
        }

        effect.onTurnStart(enemy);

        context.getEventBus().emit(BattleEvent.of(
            BattleEventType.STATUS_EFFECT_TRIGGERED,
            new StatusEffectPayload(enemy, effect, () -> {

              if (!effect.tick(enemy)) {
                effect.onRemove(enemy);
                enemy.removeStatusEffect(effect);
              }

              if (checkBattleState())
                return; // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä

              turnProcessor.runNext();
            })));
      });
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞
  private void processEnemyActions(Enemy enemy, TurnProcessor turnProcessor, Player player) {
    for (ActionPlan.Action action : new ArrayList<>(enemy.getActionPlan().getActions())) {
      turnProcessor.addAction(() -> {
        if (!enemy.isAlive()) {
          turnProcessor.runNext(); // –º—ë—Ä—Ç–≤—ã–π –≤—Ä–∞–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
          return;
        }
        executeEnemyAction(enemy, action, turnProcessor, player);
      });
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞ (–∞—Ç–∞–∫–∞/–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ)
  private void executeEnemyAction(Enemy enemy, ActionPlan.Action action, TurnProcessor turnProcessor, Player player) {
    Targetable target = action.getTarget();

    // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ü–µ–ª—å –º–µ—Ä—Ç–≤–∞
    if (target instanceof Entity entityTarget && !entityTarget.isAlive()) {
      enemy.planActions(player, enemy);
      target = enemy.getActionPlan().getActions().get(0).getTarget();
    }

    switch (action.getType()) {
      case ATTACK -> executeEnemyAttack(enemy, target, turnProcessor, player);
      case CAST_SPELL -> executeEnemySpell(enemy, target, action.getEffect(), turnProcessor);
    }
  }

  // –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
  private void executeEnemyAttack(Enemy enemy, Targetable target, TurnProcessor turnProcessor, Player player) {
    context.getEventBus().emit(BattleEvent.of(
        BattleEventType.UNIT_ATTACK,
        new UnitAttackPayload(enemy, target, () -> {
          if (checkBattleState())
            return; // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
          turnProcessor.runNext();
        })));
  }

  // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤—Ä–∞–≥–∞
  private void executeEnemySpell(Enemy caster, Targetable target, StatusEffect effect, TurnProcessor turnProcessor) {
    System.out.println("–í—Ä–∞–≥ –∫–∞—Å—Ç—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: " + caster.getName());

    context.getEventBus().emit(BattleEvent.of(
        BattleEventType.UNIT_CAST_SPELL,
        new UnitSpellPayload(caster, target, effect, () -> {
          if (!caster.isAlive()) {
            turnProcessor.runNext();
            return;
          }

          if (effect != null && target instanceof Entity entityTarget) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            StatusEffect existing = entityTarget.getStatusEffects().stream()
                .filter(e -> e.getName().equals(effect.getName()))
                .findFirst().orElse(null);

            if (existing != null) {
              existing.onRemove(entityTarget);
              entityTarget.removeStatusEffect(existing);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            entityTarget.addStatusEffect(effect);
            effect.onApply(entityTarget);

            context.getEventBus().emit(BattleEvent.of(
                BattleEventType.STATUS_EFFECT_APPLIED, entityTarget));
          }

          if (checkBattleState())
            return; // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä

          turnProcessor.runNext();
        })));
  }

  // -------------------- –ö–û–õ–û–î–ê --------------------
  public void drawCards(int count) {
    Player player = context.getPlayer();

    int cardsNeeded = count;
    while (cardsNeeded > 0 && player.getHand().size() < player.getMaxHand()) {
      if (player.getBattleDeck().isEmpty() && !player.getDiscard().isEmpty()) {
        player.getBattleDeck().addAll(player.getDiscard());
        player.getDiscard().clear();
      }
      if (player.getBattleDeck().isEmpty())
        break;

      player.getHand().add(player.getBattleDeck().remove(0));
      cardsNeeded--;
    }

    player.restoreMana(player.getMaxMana());
  }

  // -------------------- –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¶–ê –ë–û–Ø --------------------
  public boolean isBattleOver() {
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();
    return player.getHealth() <= 0 || enemy.getHealth() <= 0;
  }

  public String getWinner() {
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();
    if (player.getHealth() <= 0) {
      context.getEventBus().emit(BattleEvent.of(BattleEventType.RESTART, null));
      return "–í—Ä–∞–≥";
    }

    if (enemy.getHealth() <= 0) {
      context.getEventBus().emit(BattleEvent.of(BattleEventType.RESTART, null));
      return "–ò–≥—Ä–æ–∫";
    }
    return "–ù–∏—á—å—è";
  }

  public void startPlayerTurn() {
    System.out.println("-------------–•–û–î –ò–ì–†–û–ö–ê-------------");
    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();

    // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –∏–≥—Ä–æ–∫–µ
    for (StatusEffect effect : new ArrayList<>(player.getStatusEffects())) {
      effect.onTurnStart(player); // –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç (—É—Ä–æ–Ω, –ª–µ—á–µ–Ω–∏–µ –∏ —Ç.–¥.)
      if (!effect.tick(player)) { // —É–º–µ–Ω—å—à–∞–µ–º duration –∏ —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
        player.removeStatusEffect(effect);
      }
    }

    if (!player.isAlive()) {
      getWinner();
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –º—ë—Ä—Ç–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    }

    // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç, –º–∞–Ω—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    player.restoreMana(player.getMaxMana());
    drawCards(player.getStartingHandSize());

    // 2Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    for (Slot slot : player.getSlots()) {
      Unit unit = slot.getUnit();
      if (unit != null) {
        System.out.println("–í —Å–ª–æ—Ç–µ –µ—Å—Ç—å —é–Ω–∏—Ç: " + unit.getName());
        unit.planActions(player, enemy);
      } else {
        System.out.println("–í —Å–ª–æ—Ç–µ –Ω–µ—Ç —é–Ω–∏—Ç–∞.");
      }
    }

    // 3Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞
    enemy.planActions(player, enemy);
  }

  public boolean summonUnit(Unit unit, Slot targetSlot) {
    if (targetSlot.getUnit() != null) {
      System.out.println("–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –Ω–µ–ª—å–∑—è –ø—Ä–∏–∑–≤–∞—Ç—å —é–Ω–∏—Ç–∞!");
      return false;
    }

    targetSlot.setUnit(unit);
    System.out.println("–ü—Ä–∏–∑–≤–∞–Ω —é–Ω–∏—Ç " + unit.getName() + " –≤ —Å–ª–æ—Ç " + targetSlot);

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ–ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è —é–Ω–∏—Ç–∞
    unit.planActions(context.getPlayer(), context.getEnemy());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è UI
    context.getEventBus().emit(BattleEvent.of(BattleEventType.UNIT_SUMMONED, unit));
    return true;
  }
}
