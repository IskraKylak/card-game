package io.github.some_example_name.core.effects;

import io.github.some_example_name.core.BattleEvent;
import io.github.some_example_name.core.BattleEventType;
import io.github.some_example_name.core.GameContext;
import io.github.some_example_name.model.Entity;
import io.github.some_example_name.model.Targetable;
import io.github.some_example_name.model.payload.StatusEffectPayload;
import io.github.some_example_name.model.status.StatusEffect;
import java.util.function.Supplier;

public class DebuffEffect implements CardEffect {
  private final Supplier<StatusEffect> effectSupplier;

  public DebuffEffect(Supplier<StatusEffect> effectSupplier) {
    this.effectSupplier = effectSupplier;
  }

  @Override
  public boolean apply(GameContext context, Targetable target) {
    if (target instanceof Entity) {
      Entity entity = (Entity) target;
      StatusEffect effect = effectSupplier.get(); // <-- —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–∞–∂–¥—ã–π —Ä–∞–∑
      // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç —É —é–Ω–∏—Ç–∞
      StatusEffect existing = entity.getStatusEffects().stream()
          .filter(e -> e.getName().equals(effect.getName())) // –º–æ–∂–Ω–æ e.getClass() == effect.getClass()
          .findFirst()
          .orElse(null);

      if (existing != null) {
        existing.onRemove(entity);
        entity.removeStatusEffect(existing);
      }

      effect.onApply(entity); // <-- –ø—Ä–∏–º–µ–Ω—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–∑—É

      context.getEventBus().emit(BattleEvent.of(
          BattleEventType.STATUS_EFFECT_APPLIED,
          new StatusEffectPayload(entity, effect, () -> {
            // Callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ –ª–æ–≥–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          })));

      if (effect.getDuration() > 0) {
        entity.addStatusEffect(effect);
      }

      System.out.println("–ù–∞ " + entity.getName() + " –Ω–∞–ª–æ–∂–µ–Ω –¥–µ–±–∞—Ñ—Ñ: " + effect.getName());
      return true;
    }
    System.out.println("–î–µ–±–∞—Ñ—Ñ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —é–Ω–∏—Ç–∞!");
    return false;
  }
}
