package io.github.some_example_name.ui.panels;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.utils.Scaling;
import com.badlogic.gdx.math.Vector2;

import java.util.ArrayList;

import io.github.some_example_name.core.GameContext;
import io.github.some_example_name.core.GameEngine;
import io.github.some_example_name.model.Enemy;
import io.github.some_example_name.model.Entity;
import io.github.some_example_name.model.Player;
import io.github.some_example_name.model.Slot;
import io.github.some_example_name.model.Targetable;
import io.github.some_example_name.model.Unit;
import io.github.some_example_name.ui.elements.EnemyUI;
import io.github.some_example_name.ui.elements.EntityUI;
import io.github.some_example_name.ui.elements.PlayerUI;
import io.github.some_example_name.ui.elements.SlotUI;
import io.github.some_example_name.ui.elements.UnitUI;

public class BoardUI extends Table {

  private final GameContext context;
  private final GameEngine engine;
  private final Skin skin;

  private EnemyUI enemyUI;
  private Table slotsRow;
  private final PlayerUI playerUI;

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω
  private Image backgroundImage;

  public BoardUI(GameContext context, GameEngine engine, Skin skin) {
    this.context = context;
    this.engine = engine;
    this.skin = skin;

    // –§–æ–Ω
    Texture backgroundTexture = new Texture("game/board/Board.png");
    Image backgroundImage = new Image(backgroundTexture);
    backgroundImage.setScaling(Scaling.fill);
    backgroundImage.setFillParent(true);
    this.addActor(backgroundImage);

    Player player = context.getPlayer();
    Enemy enemy = context.getEnemy();

    // Enemy —Å–≤–µ—Ä—Ö—É
    enemyUI = new EnemyUI(enemy, skin);
    this.add(enemyUI).expandX().top().center().padTop(10).row();

    // –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    this.add().expand().row();

    // –°–ª–æ—Ç—ã –∏–≥—Ä–æ–∫–∞
    slotsRow = new Table();
    for (Slot slot : player.getSlots()) {
      SlotUI slotUI = new SlotUI(slot, skin);
      slotsRow.add(slotUI).size(40, 20).pad(40);
    }
    this.add(slotsRow).expandX().top().center().padBottom(10).row();

    // –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    this.add().expand().row();

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º PlayerUI –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–∫—Ç—ë—Ä
    float spriteWidth = 100;
    float spriteHeight = 90;
    playerUI = new PlayerUI(player, skin, "game/player", spriteWidth, spriteHeight);
    // this.addActor(playerUI);

    this.add(playerUI).expandX().bottom().center().padBottom(20).row();
  }

  @Override
  public void layout() {
    super.layout();

    if (playerUI != null) {
      float spriteWidth = playerUI.getWidth();
      float spriteHeight = playerUI.getHeight();

      float x = (getWidth() - spriteWidth) / 2f;
      float y = 20; // –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞
      playerUI.setPosition(x, y);
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª—å –ø–æ stage-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ SlotUI, –∞ —Ç–∞–∫–∂–µ
   * –ø–æ UnitUI –≤–Ω—É—Ç—Ä–∏ SlotUI (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å).
   */
  public Targetable findTargetAt(float stageX, float stageY) {
    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã (—Å–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä SlotUI) ‚Äî –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ UNIT
    for (Actor slotActor : slotsRow.getChildren()) {
      if (slotActor instanceof SlotUI) {
        SlotUI slotUI = (SlotUI) slotActor;
        Vector2 pos = slotUI.localToStageCoordinates(new Vector2(0, 0));
        if (stageX >= pos.x && stageX <= pos.x + slotUI.getWidth() && stageY >= pos.y
            && stageY <= pos.y + slotUI.getHeight()) {
          // –í–µ—Ä–Ω—ë–º Slot (–º–æ–¥–µ–ª—å) ‚Äî Summon –æ–∂–∏–¥–∞–µ—Ç Slot
          return slotUI.getSlot();
        }
      }
    }

    // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º UnitUI –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ SlotUI ‚Äî –¥–ª—è –±—É—Ñ—Ñ–æ–≤/–∞—Ç–∞–∫–∏ –ø–æ —é–Ω–∏—Ç—É
    for (Actor slotActor : slotsRow.getChildren()) {
      if (slotActor instanceof SlotUI) {
        SlotUI slotUI = (SlotUI) slotActor;
        UnitUI unitUI = slotUI.getUnitUI();
        if (unitUI != null) {
          Vector2 pos = unitUI.localToStageCoordinates(new Vector2(0, 0));
          if (stageX >= pos.x && stageX <= pos.x + unitUI.getWidth() && stageY >= pos.y
              && stageY <= pos.y + unitUI.getHeight()) {
            return unitUI.getEntity(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å Unit
          }
        }
      }
    }

    // 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤–æ –≤—Ä–∞–≥–∞
    Vector2 enemyPos = enemyUI.localToStageCoordinates(new Vector2(0, 0));
    if (stageX >= enemyPos.x && stageX <= enemyPos.x + enemyUI.getWidth() && stageY >= enemyPos.y
        && stageY <= enemyPos.y + enemyUI.getHeight()) {
      return context.getEnemy(); // <- –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Enemy –∫–∞–∫ —Ü–µ–ª—å
    }

    return null;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (HP / ATK / –∏–º—è) ‚Äî –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç UI-—ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ
   * —Ç—Ä–æ–≥–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –∞–∫—Ç–æ—Ä–æ–≤.
   */
  public void refresh() {
    refreshRecursive(this);
  }

  public void addUnitToSlot(Unit unit, Slot slot) {
    for (Actor actor : slotsRow.getChildren()) {
      if (actor instanceof SlotUI slotUI && slotUI.getSlot() == slot) {
        slotUI.setUnit(unit); // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        return;
      }
    }
  }

  private void refreshRecursive(Actor actor) {
    if (actor instanceof EntityUI<?> entityUI) {
      entityUI.refresh();
    }
    if (actor instanceof Table table) {
      for (Actor child : table.getChildren()) {
        refreshRecursive(child);
      }
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ UnitUI (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ) –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Ö–æ–¥–æ–≤. –ü—Ä–æ—Ö–æ–¥
   * –ø–æ SlotUI –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö UnitUI.
   */
  public ArrayList<UnitUI> getPlayerUnitUIs() {
    ArrayList<UnitUI> result = new ArrayList<UnitUI>();
    for (Actor a : slotsRow.getChildren()) {
      if (a instanceof SlotUI) {
        SlotUI s = (SlotUI) a;
        UnitUI uui = s.getUnitUI();
        if (uui != null && uui.getEntity().isAlive()) {
          result.add(uui);
        }
      }
    }
    return result;
  }

  public PlayerUI getPlayerUI() {
    return playerUI;
  }

  public EntityUI<?> findEntityUI(Entity entity) {
    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —é–Ω–∏—Ç—ã –∏–≥—Ä–æ–∫–∞
    for (Actor a : slotsRow.getChildren()) {
      if (a instanceof SlotUI s) {
        UnitUI uui = s.getUnitUI();
        if (uui != null && uui.getEntity() == entity) {
          return uui;
        }
      }
    }

    // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–∞
    if (enemyUI != null && enemyUI.getEntity() == entity) {
      return enemyUI;
    }

    return null; // –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  }
}
